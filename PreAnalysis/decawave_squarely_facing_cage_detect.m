% Decawave vector plot

% This script is to detect when the two tags make a line that is 90 degrees
% from the cage wall

root_save = '/Users/madeleinesnyder/Documents/Berkeley/Bats/data/Decawave_DBG';
% session = 2; day = '200923';
% filetype = strcat('decawave_',day,'*',num2str(session),'.mat');
% dirlist = dir(fullfile(root_save,filetype)); 
% deca = [root_save filesep dirlist(end).name];

% Better example
session = 1; day = '200925'; total_time = 117.04; % Get this from decawave output in matlab
filetype = strcat('decawave_',day,'*',num2str(session),'.mat');
dirlist = dir(fullfile(root_save,filetype)); 
deca = [root_save filesep dirlist(end).name];
load(deca);

% Plot the xy points
x = squeeze(UD.Pos(1,1,:)); x2 = squeeze(UD.Pos(1,2,:));
y = squeeze(UD.Pos(2,1,:)); y2 = squeeze(UD.Pos(2,2,:));
z = squeeze(UD.Pos(3,1,:)); z2 = squeeze(UD.Pos(3,2,:));
figure();  hold on; title("Red Tag1; Blue Tag2; Birds-Eye-View");
xlabel('NE wall'); ylabel("Door Wall");
scatter(x,y,'r.');
scatter(x2,y2,'b.');
figure(); hold on; title("Red Tag1; Blue Tag2; Side-View#1");
scatter(x,z,'r.');
scatter(x2,z2,'b.');

% Compute the velocity of each tag in the x-y plane (% 117.04s time total).
sample_rate = size(UD.Pos,3)/117.04;
for j=1:2
    for i=2:size(UD.Pos,3)
        vx(i,j) = abs(squeeze(UD.Pos(1,j,i))-squeeze(UD.Pos(1,j,i-1)))/(1/sample_rate);
        vy(i,j) = abs(squeeze(UD.Pos(2,j,i))-squeeze(UD.Pos(2,j,i-1)))/(1/sample_rate);
    end
end
% Plot the velocity to make sure it's in the right ballpark
figure(); plot(vx(:,1));

% Plot all the points as vectors.
% Bolo_x is a two-column matrix. The x coordinates of each tag.
bolo_x = [squeeze(UD.Pos(1,1,:)),squeeze(UD.Pos(1,2,:))];
bolo_y = [squeeze(UD.Pos(2,1,:)),squeeze(UD.Pos(2,2,:))];
figure(); hold on; cmap = colormap(cool);
for i=1:size(UD.Pos,3)
    plot(bolo_x(i,:),bolo_y(i,:));
end

% Plot the lines as time evolves and look at velocity 
colormap(cool);
custom_cool = cool(size(UD.Pos,3));
figure(); title('Tag Bolo XY Positions'); subplot(2,2,[1 3]); hold on; xlabel('NorthEast Wall (m)'); ylabel('Door Wall (m)'); 
for i=1:size(UD.Pos,3)
    plot(bolo_x(i,:),bolo_y(i,:),'Color',custom_cool(i,:));
end
subplot(2,2,2); hold on; colormap(cool); xlabel('Time'); ylabel('Velocity Tag 1 x');
col = (1:size(vx,1));  % This is the color, vary with x in this case.
surface([col;col;],[vx(:,1)';vx(:,1)'],[col;col],...
    'facecol','no',...
    'edgecol','interp',...
    'linew',2);
subplot(2,2,4); hold on; colormap(cool); xlabel('Time'); ylabel('Velocity Tag 2 x');
col = (1:size(vy,1));  % This is the color, vary with x in this case.
surface([col;col;],[vy(:,1)';vy(:,1)'],[col;col],...
    'facecol','no',...
    'edgecol','interp',...
    'linew',2);

% PLot velocty of x and y on room direction axis
figure(); hold on; plot(vy(:,1)*100,1:size(UD.Pos,3),'r');
plot(1:size(UD.Pos,3),vx(:,1)*100,'b');

% Try heatmap of precision
coord_mat = zeros(int32(max(UD.Pos(1,1,:))*100)-int32(abs(min(UD.Pos(1,1,:)))*100)+1,int32(max(UD.Pos(2,1,:))*100)-int32(abs(min(UD.Pos(2,1,:)))*100)+1);
% Plot the normalizes x and y coordinate precisions in a heatmap.
for i=1:size(UD.Pos,3)
    coord = int32(squeeze(UD.Pos(:,1,i)*100));
    coord_mat(coord(1)+int32(abs(min(UD.Pos(1,1,:)))*100+1),coord(2)+int32(abs(min(UD.Pos(2,1,:)))*100)+1) = UD.Prec(i);
end
% Create heatmap
figure(); hold on;
heatmap(coord_mat,...
'Colormap',[0 0 0.00520833333333333;0.0138888888888889 0.0138888888888889 0.0243055555555556;0.0277777777777778 0.0277777777777778 0.0434027777777778;0.0416666666666667 0.0416666666666667 0.0625;0.0555555555555556 0.0555555555555556 0.0815972222222222;0.0694444444444444 0.0694444444444444 0.100694444444444;0.0833333333333333 0.0833333333333333 0.119791666666667;0.0972222222222222 0.0972222222222222 0.138888888888889;0.111111111111111 0.111111111111111 0.157986111111111;0.125 0.125 0.177083333333333;0.138888888888889 0.138888888888889 0.196180555555556;0.152777777777778 0.152777777777778 0.215277777777778;0.166666666666667 0.166666666666667 0.234375;0.180555555555556 0.180555555555556 0.253472222222222;0.194444444444444 0.194444444444444 0.272569444444444;0.208333333333333 0.208333333333333 0.291666666666667;0.222222222222222 0.222222222222222 0.310763888888889;0.236111111111111 0.236111111111111 0.329861111111111;0.25 0.25 0.348958333333333;0.263888888888889 0.263888888888889 0.368055555555556;0.277777777777778 0.277777777777778 0.387152777777778;0.291666666666667 0.291666666666667 0.40625;0.305555555555556 0.305555555555556 0.425347222222222;0.319444444444444 0.319444444444444 0.444444444444444;0.333333333333333 0.338541666666667 0.458333333333333;0.347222222222222 0.357638888888889 0.472222222222222;0.361111111111111 0.376736111111111 0.486111111111111;0.375 0.395833333333333 0.5;0.388888888888889 0.414930555555556 0.513888888888889;0.402777777777778 0.434027777777778 0.527777777777778;0.416666666666667 0.453125 0.541666666666667;0.430555555555556 0.472222222222222 0.555555555555556;0.444444444444444 0.491319444444444 0.569444444444444;0.458333333333333 0.510416666666667 0.583333333333333;0.472222222222222 0.529513888888889 0.597222222222222;0.486111111111111 0.548611111111111 0.611111111111111;0.5 0.567708333333333 0.625;0.513888888888889 0.586805555555556 0.638888888888889;0.527777777777778 0.605902777777778 0.652777777777778;0.541666666666667 0.625 0.666666666666667;0.555555555555556 0.644097222222222 0.680555555555556;0.569444444444444 0.663194444444444 0.694444444444444;0.583333333333333 0.682291666666667 0.708333333333333;0.597222222222222 0.701388888888889 0.722222222222222;0.611111111111111 0.720486111111111 0.736111111111111;0.625 0.739583333333333 0.75;0.638888888888889 0.758680555555555 0.763888888888889;0.652777777777778 0.777777777777778 0.777777777777778;0.674479166666667 0.791666666666667 0.791666666666667;0.696180555555556 0.805555555555556 0.805555555555556;0.717881944444444 0.819444444444444 0.819444444444444;0.739583333333333 0.833333333333333 0.833333333333333;0.761284722222222 0.847222222222222 0.847222222222222;0.782986111111111 0.861111111111111 0.861111111111111;0.8046875 0.875 0.875;0.826388888888889 0.888888888888889 0.888888888888889;0.848090277777778 0.902777777777778 0.902777777777778;0.869791666666667 0.916666666666667 0.916666666666667;0.891493055555555 0.930555555555555 0.930555555555555;0.913194444444444 0.944444444444444 0.944444444444444;0.934895833333333 0.958333333333333 0.958333333333333;0.956597222222222 0.972222222222222 0.972222222222222;0.978298611111111 0.986111111111111 0.986111111111111;1 1 1]);
figure(); cmap=colormap(hot);
surf(coord_mat);

% Try heatmap of x velocity
coord_mat_velx = zeros(int32(max(UD.Pos(1,1,:))*100)-int32(abs(min(UD.Pos(1,1,:)))*100)+1,int32(max(UD.Pos(2,1,:))*100)-int32(abs(min(UD.Pos(2,1,:)))*100)+1);
% Plot the normalizes x and y coordinate precisions in a heatmap.
for i=1:size(UD.Pos,3)
    coord = int32(squeeze(UD.Pos(:,1,i)*100));
    coord_mat_velx(coord(1)+int32(abs(min(UD.Pos(1,1,:)))*100+1),coord(2)+int32(abs(min(UD.Pos(2,1,:)))*100)+1) = vx(i,1);
end

% Create heatmap
figure(); 
heatmap(coord_mat_velx,...
'Colormap',[0 0 0.00520833333333333;0.0138888888888889 0.0138888888888889 0.0243055555555556;0.0277777777777778 0.0277777777777778 0.0434027777777778;0.0416666666666667 0.0416666666666667 0.0625;0.0555555555555556 0.0555555555555556 0.0815972222222222;0.0694444444444444 0.0694444444444444 0.100694444444444;0.0833333333333333 0.0833333333333333 0.119791666666667;0.0972222222222222 0.0972222222222222 0.138888888888889;0.111111111111111 0.111111111111111 0.157986111111111;0.125 0.125 0.177083333333333;0.138888888888889 0.138888888888889 0.196180555555556;0.152777777777778 0.152777777777778 0.215277777777778;0.166666666666667 0.166666666666667 0.234375;0.180555555555556 0.180555555555556 0.253472222222222;0.194444444444444 0.194444444444444 0.272569444444444;0.208333333333333 0.208333333333333 0.291666666666667;0.222222222222222 0.222222222222222 0.310763888888889;0.236111111111111 0.236111111111111 0.329861111111111;0.25 0.25 0.348958333333333;0.263888888888889 0.263888888888889 0.368055555555556;0.277777777777778 0.277777777777778 0.387152777777778;0.291666666666667 0.291666666666667 0.40625;0.305555555555556 0.305555555555556 0.425347222222222;0.319444444444444 0.319444444444444 0.444444444444444;0.333333333333333 0.338541666666667 0.458333333333333;0.347222222222222 0.357638888888889 0.472222222222222;0.361111111111111 0.376736111111111 0.486111111111111;0.375 0.395833333333333 0.5;0.388888888888889 0.414930555555556 0.513888888888889;0.402777777777778 0.434027777777778 0.527777777777778;0.416666666666667 0.453125 0.541666666666667;0.430555555555556 0.472222222222222 0.555555555555556;0.444444444444444 0.491319444444444 0.569444444444444;0.458333333333333 0.510416666666667 0.583333333333333;0.472222222222222 0.529513888888889 0.597222222222222;0.486111111111111 0.548611111111111 0.611111111111111;0.5 0.567708333333333 0.625;0.513888888888889 0.586805555555556 0.638888888888889;0.527777777777778 0.605902777777778 0.652777777777778;0.541666666666667 0.625 0.666666666666667;0.555555555555556 0.644097222222222 0.680555555555556;0.569444444444444 0.663194444444444 0.694444444444444;0.583333333333333 0.682291666666667 0.708333333333333;0.597222222222222 0.701388888888889 0.722222222222222;0.611111111111111 0.720486111111111 0.736111111111111;0.625 0.739583333333333 0.75;0.638888888888889 0.758680555555555 0.763888888888889;0.652777777777778 0.777777777777778 0.777777777777778;0.674479166666667 0.791666666666667 0.791666666666667;0.696180555555556 0.805555555555556 0.805555555555556;0.717881944444444 0.819444444444444 0.819444444444444;0.739583333333333 0.833333333333333 0.833333333333333;0.761284722222222 0.847222222222222 0.847222222222222;0.782986111111111 0.861111111111111 0.861111111111111;0.8046875 0.875 0.875;0.826388888888889 0.888888888888889 0.888888888888889;0.848090277777778 0.902777777777778 0.902777777777778;0.869791666666667 0.916666666666667 0.916666666666667;0.891493055555555 0.930555555555555 0.930555555555555;0.913194444444444 0.944444444444444 0.944444444444444;0.934895833333333 0.958333333333333 0.958333333333333;0.956597222222222 0.972222222222222 0.972222222222222;0.978298611111111 0.986111111111111 0.986111111111111;1 1 1]);





%% Get slopes of lines 
slopes = (bolo_y(:,1)-bolo_y(:,2)) ./ (bolo_x(:,1)-bolo_x(:,2));

% Find indexes where slopes are low and high (potential feed points)
feed_starts_SW_NE = find(abs(slopes)<0.1);
feed_starts_SE_NW = find(abs(slopes)>15);
% Find indexes where 

% Plot the lines in different colors according to their slope and position.
figure(); colormap(cool); subplot(1,2,1); hold on;
for i=1:size(UD.Pos,3)
    if ismember(i,feed_starts_SW_NE)
        plot(bolo_x(i,:),bolo_y(i,:),'r');
    elseif ismember(i,feed_starts_SE_NW)
        plot(bolo_x(i,:),bolo_y(i,:),'m');
    else 
        plot(bolo_x(i,:),bolo_y(i,:),'b');
    end
end
subplot(1,2,2); hold on; plot(slopes);



